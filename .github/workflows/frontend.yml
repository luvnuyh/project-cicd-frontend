name: React CI/CD

# 트리거: push, pr(풀리퀘스트) 이벤트 발생시 작동, 브런치는 메인.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# 해야할 일
jobs:
  react-deploy:
    runs-on: ubuntu-latest
    steps:
      # 체크아웃 -> 깃허브의 저장소로부터 소스 체크아웃
      - name: Checkout repository resource
        uses: actions/checkout@v2

      # 환경변수 동적 생성 -> .env 파일 생성(ec2에 관련된 정보 ㅅ세팅)
      - name: .env 환경 변수 동적 생성
        run: |
          echo "${{secrets.CLIENT_ENV}}" > .env
          pwd
          ls -al

      # 빌드를 위한 조건 -> nodejs 설치
      - name: nodejs 설치
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      # npm install 라이브러리 설치 -> node_modules 생성됨
      # run: npm install
      - name: install 독립 라이브러리
        run: npm install

      # 단위 테스트 -> 생략
      # - name: 단위 테스트
      #   run: npm test


      # 빌드
      # run: npm run build (터미널에서 먼저 확인해보기)
      - name: 빌드
        run: npm run build
             ls ./build
      
      # 빌드의 결과물을 ec2 업로드
      # 대상 : ./build/*
      # 타겟 : /home/ubuntu/client
      # 대상 위치에 존재하는 모든 리소스를 ec2의 ~/client 하위에 복사하라는 뜻
      - name: EC2에 빌드 결과물들 업로드
        uses: applebot/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ./build/*
          target: /home/ubuntu/client


      # 뒷정리(업로드 결과 -> nginx의 root로 이동 , 디렉토리 정리)

